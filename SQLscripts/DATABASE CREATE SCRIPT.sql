CREATE SCHEMA IF NOT EXISTS CS3810_MediDB;

USE CS3810_MediDB;

CREATE TABLE IF NOT EXISTS HOSPITAL (
    HOS_ID INT PRIMARY KEY AUTO_INCREMENT,
    HOS_NAME VARCHAR(255),
    HOS_PHYS_ADDRESS VARCHAR(255),
    HOS_MAIL_ADDRESS VARCHAR(255),
    HOS_BILL_ADDRESS VARCHAR(255),
    HOS_BILL_PHONE CHAR(10),
    HOS_PC_PHONE VARCHAR(255),
    HOS_HR_PHONE VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS PATIENT (
    PAT_ID INT PRIMARY KEY AUTO_INCREMENT,
    PAT_FNAME VARCHAR(255) NOT NULL,
    PAT_LNAME VARCHAR(255) NOT NULL,
    PAT_DOB DATE NOT NULL,
    PAT_SEX CHAR(2) NOT NULL,
    PAT_HEIGHT DECIMAL(2 , 2 ) NOT NULL COMMENT 'Stored in meters',
    PAT_WEIGHT DECIMAL(4 , 2 ) NOT NULL COMMENT 'Stored in kilograms',
    PAT_ETH VARCHAR(255) NOT NULL,
    PAT_MAIL_ADDRESS VARCHAR(255),
    PAT_PHONE CHAR(12),
    PAT_SSN CHAR(11)
);

CREATE TABLE IF NOT EXISTS HISTORY_RECORD (
    HIST_REC_ID INT PRIMARY KEY AUTO_INCREMENT,
    HIST_REC_ADMIT_DATE DATE,
    HIST_REC_ADMIT_TIME TIME,
    HIST_REC_ADMIT_EMP INT,
    HIST_REC_DISCH_DATE DATE,
    HIST_REC_DISCH_TIME TIME,
    HIST_REC_DISCH_EMP INT,
    HIST_REC_HEIGHT DECIMAL(3 , 2 ) COMMENT 'Stored in meters',
    HIST_REC_WEIGHT DECIMAL(3 , 2 ) COMMENT 'Stored in kilograms'
);

CREATE TABLE IF NOT EXISTS EMPLOYEE (
    EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
    EMP_NAME VARCHAR(255),
    EMP_MAIL_ADDRESSS VARCHAR(255),
    EMP_PHONE VARCHAR(255),
    EMP_TITLE VARCHAR(255),
    EMP_WAGE DECIMAL(9 , 2 ),
    EMP_SALARY DECIMAL(18 , 2 )
);

CREATE TABLE IF NOT EXISTS BILL (
    BILL_NUMBER INT PRIMARY KEY AUTO_INCREMENT,
    BILL_PAT_NAME VARCHAR(255),
    BILL_PAT_MAILING_ADDRESS VARCHAR(255),
    BILL_PAT_PHONE VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS LOCATION_GROUP (
    LOC_GROUP_NAME VARCHAR(255) NOT NULL,
    LOC_GROUP_HOS_ID INT NOT NULL,
    PRIMARY KEY (LOC_GROUP_NAME , LOC_GROUP_HOS_ID),
    FOREIGN KEY (LOC_GROUP_HOS_ID)
        REFERENCES HOSPITAL (HOS_ID)
);

CREATE TABLE IF NOT EXISTS LOCATION (
    LOC_ID INT PRIMARY KEY AUTO_INCREMENT,
    LOC_NAME VARCHAR(255),
    LOC_RATE DECIMAL(6 , 2 ),
    LOC_PHONE VARCHAR(255),
    LOC_LOC_GROUP_NAME VARCHAR(255),
    LOC_HOS_ID INT,
    FOREIGN KEY (LOC_LOC_GROUP_NAME)
        REFERENCES LOCATION_GROUP (LOC_GROUP_NAME),
    FOREIGN KEY (LOC_HOS_ID)
        REFERENCES HOSPITAL (HOS_ID)
);

CREATE TABLE IF NOT EXISTS BILL_LINE (
    BILL_LINE_ITEM_NUMBER INT AUTO_INCREMENT,
    BILL_NUMBER INT,
    LOC_NAME VARCHAR(255),
    LOC_RATE DECIMAL(6 , 2 ),
    LOC_TIME TIME,
    PRIMARY KEY (BILL_LINE_ITEM_NUMBER , BILL_NUMBER),
    FOREIGN KEY (BILL_NUMBER)
        REFERENCES BILL (BILL_NUMBER)
);

CREATE TABLE IF NOT EXISTS VISIT (
    VISIT_ID INT PRIMARY KEY AUTO_INCREMENT,
    VISIT_ADMIT_DATE DATE,
    VISIT_ADMIT_TIME TIME,
    VISIT_DISCH_DATE DATE,
    VISIT_DISCH_TIME TIME,
    VISIT_LOC_ID INT,
    VISIT_LOC_DATE_START DATE,
    VISIT_LOC_TIME_START TIME,
    VISIT_PAT_ID INT,
    VISIT_DISCH_EMP INT,
    VISIT_ADMIT_EMP INT,
    FOREIGN KEY (VISIT_LOC_ID)
        REFERENCES LOCATION (LOC_ID),
    FOREIGN KEY (VISIT_PAT_ID)
        REFERENCES PATIENT (PAT_ID),
    FOREIGN KEY (VISIT_DISCH_EMP)
        REFERENCES EMPLOYEE (EMP_ID),
    FOREIGN KEY (VISIT_ADMIT_EMP)
        REFERENCES EMPLOYEE (EMP_ID)
);

CREATE UNIQUE INDEX Unique_Locations_for_each_hospital ON LOCATION (LOC_NAME, LOC_HOS_ID);
CREATE UNIQUE INDEX Unique_names_and_physical_address_for_each_hospital ON HOSPITAL (HOS_NAME, HOS_PHYS_ADDRESS);
CREATE UNIQUE INDEX Unique_names_and_mail_address_for_each_employee ON EMPLOYEE (EMP_NAME, EMP_MAIL_ADDRESS);
CREATE INDEX patient_name_lookup_assist ON PATIENT (PAT_FNAME, PAT_LNAME);

CREATE PROCEDURE prc_admit_patient
	(IN pat_id INT, IN loc_id INT, IN admit_emp INT)
	BEGIN
    SELECT COUNT(*) INTO countofrecords FROM VISIT WHERE (VISIT_PAT_ID = pat_id AND VISIT_DISCH_DATE = null AND VISIT_DISCH_TIME = null AND VISIT_DISCH_EMP = null);
    
    IF countofrecords = 0 THEN
		INSERT INTO VISIT (VISIT_ADMIT_DATE, VISIT_ADMIT_TIME, VISIT_LOC_ID, VISIT_LOC_DATE_START, VISIT_LOC_TIME_START, VISIT_PAT_ID, VISIT_ADMIT_EMP)
		VALUES (CURDATE(), CURTIME(), loc_id, CURDATE(), CURTIME(), pat_id, emp_id);
	ELSE
		SIGNAL SQLSTATE '02' SET MESSAGE_TEXT = 'There are visits currently open for this patient, try transferring the patient';
	END IF;
END;

CREATE PROCEDURE prc_discharge_patient
	(IN variable INT)
	BEGIN
END;

CREATE PROCEDURE prc_transfer_patient
	(IN variable INT)
	BEGIN
END;

CREATE PROCEDURE prc_add_hospital 
	(IN name varchar(255), IN phys_address varchar(255), IN mail_address varchar(255), IN bill_address varchar(255), IN bill_phone char(10), IN pc_phone varchar(255), IN hr_phone varchar(255), OUT outstring varchar(255))
	BEGIN
	INSERT INTO HOSPITAL (HOS_NAME,HOS_PHYS_ADDRESS,HOS_MAIL_ADDRESS,HOS_BILL_ADDRESS,HOS_BILL_PHONE,HOS_PC_PHONE,HOS_HR_PHONE)
	VALUES (name, phys_address, mail_address, bill_address, bill_phone, pc_phone, hr_phone);
END;

CREATE PROCEDURE prc_remove_hospital
	(IN variable INT)
	BEGIN
END;

CREATE PROCEDURE prc_add_employee
	(IN name VARCHAR(255), IN mail VARCHAR(255), IN phone VARCHAR(255), IN title VARCHAR(255), IN wage  DECIMAL(9 , 2 ), IN salary DECIMAL(18 , 2 ))
	BEGIN
	INSERT INTO EMPLOYEE (EMP_NAME, EMP_MAIL_ADDRESSS, EMP_PHONE, EMP_TITLE, EMP_WAGE, EMP_SALARY)
	VALUES(name,mail,phone,title,wage,salary);
END;

CREATE PROCEDURE prc_remove_employee
	(IN variable INT)
	BEGIN
END;

CREATE PROCEDURE prc_add_location_group
	(IN group_name VARCHAR(255), IN hos_id INT)
	BEGIN
	INSERT INTO LOCATION_GROUP VALUES (group_name, hos_id);
END;

CREATE PROCEDURE prc_remove_location_group
	(IN variable INT)
	BEGIN
END;

CREATE PROCEDURE `prc_add_location`(IN name varchar(255), IN rate decimal(6,2),IN phone varchar(255),IN loc_group varchar(255),IN hos int,)
BEGIN
		IF loc_group is NULL then
			IF (SELECT HOS_ID FROM HOSPITAL WHERE HOS_ID=hos) IS NULL then
			ELSE  
				INSERT INTO LOCATION (LOC_NAME,LOC_RATE,LOC_PHONE,LOC_LOC_GROUP_NAME,LOC_LOC_GROUP_NAME,LOC_HOS_ID) VALUES (name,rate,phone,loc_group,hos);
			END IF;
		ELSE
			IF (SELECT LOC_GROUP_NAME FROM LOCATION_GROUP WHERE LOC_GROUP_NAME = loc_group) IS NULL then
			ELSE IF (SELECT HOS_ID FROM HOSPITAL WHERE HOS_ID=hos) IS NULL then
				SET outstring = 'Cannot add a location without a HOS_ID';
			ELSE
				INSERT INTO LOCATION (LOC_NAME,LOC_RATE,LOC_PHONE,LOC_LOC_GROUP_NAME,LOC_LOC_GROUP_NAME,LOC_HOS_ID) VALUES (name,rate,phone,loc_group,hos);
			END IF;
		END IF;
        END IF;
END

CREATE PROCEDURE prc_remove_location
	(IN variable INT)
	BEGIN
END;

CREATE TRIGGER trg_update_bill
	BEFORE UPDATE ON VISIT
    FOR EACH ROW
	BEGIN
END;

CREATE TRIGGER trg_add_hist_rec
	BEFORE UPDATE ON VISIT
    FOR EACH ROW
	BEGIN
END;


CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `all_employees` AS
    SELECT 
        `employee`.`EMP_ID` AS `EMP_ID`,
        `employee`.`EMP_NAME` AS `EMP_NAME`,
        `employee`.`EMP_MAIL_ADDRESSS` AS `EMP_MAIL_ADDRESSS`,
        `employee`.`EMP_PHONE` AS `EMP_PHONE`,
        `employee`.`EMP_TITLE` AS `EMP_TITLE`,
        `employee`.`EMP_WAGE` AS `EMP_WAGE`,
        `employee`.`EMP_SALARY` AS `EMP_SALARY`
    FROM
        `employee`;
        
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `all_hospitals` AS
    SELECT 
        `hospital`.`HOS_ID` AS `HOS_ID`,
        `hospital`.`HOS_NAME` AS `HOS_NAME`,
        `hospital`.`HOS_PHYS_ADDRESS` AS `HOS_PHYS_ADDRESS`,
        `hospital`.`HOS_MAIL_ADDRESS` AS `HOS_MAIL_ADDRESS`,
        `hospital`.`HOS_BILL_ADDRESS` AS `HOS_BILL_ADDRESS`,
        `hospital`.`HOS_BILL_PHONE` AS `HOS_BILL_PHONE`,
        `hospital`.`HOS_PC_PHONE` AS `HOS_PC_PHONE`,
        `hospital`.`HOS_HR_PHONE` AS `HOS_HR_PHONE`
    FROM
        `hospital`;
        
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `all_patients` AS
    SELECT 
        `patient`.`PAT_ID` AS `PAT_ID`,
        `patient`.`PAT_NAME` AS `PAT_NAME`,
        `patient`.`PAT_DOB` AS `PAT_DOB`,
        `patient`.`PAT_SEX` AS `PAT_SEX`,
        `patient`.`PAT_HEIGHT` AS `PAT_HEIGHT`,
        `patient`.`PAT_ETH` AS `PAT_ETH`,
        `patient`.`PAT_MAIL_ADDRESS` AS `PAT_MAIL_ADDRESS`,
        `patient`.`PAT_PHONE` AS `PAT_PHONE`,
        `patient`.`PAT_SSN` AS `PAT_SSN`
    FROM
        `patient`;